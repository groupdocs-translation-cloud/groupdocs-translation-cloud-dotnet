/*
 * GroupDocs.Translation.ApiGateway.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GroupDocs.Translation.Api.Client;
using GroupDocs.Translation.Api.Api;
// uncomment below to import models
//using GroupDocs.Translation.Api.Model;

namespace GroupDocs.Translation.Api.Test.Api
{
    /// <summary>
    ///  Class for testing TransportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransportApiTests : IDisposable
    {
        private TransportApi instance;

        public TransportApiTests()
        {
            instance = new TransportApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransportApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransportApi
            //Assert.IsType<TransportApi>(instance);
        }

        /// <summary>
        /// Test DocumentPost
        /// </summary>
        [Fact]
        public void DocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string outFormat = null;
            //string source = null;
            //List<string> targets = null;
            //System.IO.Stream file = null;
            //string format = null;
            //string url = null;
            //bool? masters = null;
            //string origin = null;
            //List<int> elements = null;
            //string savingMode = null;
            //var response = instance.DocumentPost(outFormat, source, targets, file, format, url, masters, origin, elements, savingMode);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test DocumentRequestIdGet
        /// </summary>
        [Fact]
        public void DocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DocumentRequestIdGet(requestId);
            //Assert.IsType<CloudFileResponse>(response);
        }

        /// <summary>
        /// Test ListOfAvailableLanguagesGet
        /// </summary>
        [Fact]
        public void ListOfAvailableLanguagesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListOfAvailableLanguagesGet();
            //Assert.IsType<List<LanguagePairData>>(response);
        }

        /// <summary>
        /// Test TextPost
        /// </summary>
        [Fact]
        public void TextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //List<string> targets = null;
            //string text = null;
            //List<string> texts = null;
            //string origin = null;
            //var response = instance.TextPost(source, targets, text, texts, origin);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test TextRequestIdGet
        /// </summary>
        [Fact]
        public void TextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.TextRequestIdGet(requestId);
            //Assert.IsType<CloudTextResponse>(response);
        }
    }
}
