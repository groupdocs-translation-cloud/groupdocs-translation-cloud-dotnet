/*
 * GroupDocs.Translation SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.9.2
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Translation.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Translation.Cloud.Sdk.Model
{
    /// <summary>
    /// Defines HttpStatusCode
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum HttpStatusCode
    {
        /// <summary>
        /// Enum Continue for value: Continue
        /// </summary>
        [EnumMember(Value = "Continue")]
        Continue = 1,

        /// <summary>
        /// Enum SwitchingProtocols for value: SwitchingProtocols
        /// </summary>
        [EnumMember(Value = "SwitchingProtocols")]
        SwitchingProtocols = 2,

        /// <summary>
        /// Enum Processing for value: Processing
        /// </summary>
        [EnumMember(Value = "Processing")]
        Processing = 3,

        /// <summary>
        /// Enum EarlyHints for value: EarlyHints
        /// </summary>
        [EnumMember(Value = "EarlyHints")]
        EarlyHints = 4,

        /// <summary>
        /// Enum OK for value: OK
        /// </summary>
        [EnumMember(Value = "OK")]
        OK = 5,

        /// <summary>
        /// Enum Created for value: Created
        /// </summary>
        [EnumMember(Value = "Created")]
        Created = 6,

        /// <summary>
        /// Enum Accepted for value: Accepted
        /// </summary>
        [EnumMember(Value = "Accepted")]
        Accepted = 7,

        /// <summary>
        /// Enum NonAuthoritativeInformation for value: NonAuthoritativeInformation
        /// </summary>
        [EnumMember(Value = "NonAuthoritativeInformation")]
        NonAuthoritativeInformation = 8,

        /// <summary>
        /// Enum NoContent for value: NoContent
        /// </summary>
        [EnumMember(Value = "NoContent")]
        NoContent = 9,

        /// <summary>
        /// Enum ResetContent for value: ResetContent
        /// </summary>
        [EnumMember(Value = "ResetContent")]
        ResetContent = 10,

        /// <summary>
        /// Enum PartialContent for value: PartialContent
        /// </summary>
        [EnumMember(Value = "PartialContent")]
        PartialContent = 11,

        /// <summary>
        /// Enum MultiStatus for value: MultiStatus
        /// </summary>
        [EnumMember(Value = "MultiStatus")]
        MultiStatus = 12,

        /// <summary>
        /// Enum AlreadyReported for value: AlreadyReported
        /// </summary>
        [EnumMember(Value = "AlreadyReported")]
        AlreadyReported = 13,

        /// <summary>
        /// Enum IMUsed for value: IMUsed
        /// </summary>
        [EnumMember(Value = "IMUsed")]
        IMUsed = 14,

        /// <summary>
        /// Enum MultipleChoices for value: MultipleChoices
        /// </summary>
        [EnumMember(Value = "MultipleChoices")]
        MultipleChoices = 15,

        /// <summary>
        /// Enum MovedPermanently for value: MovedPermanently
        /// </summary>
        [EnumMember(Value = "MovedPermanently")]
        MovedPermanently = 16,

        /// <summary>
        /// Enum Found for value: Found
        /// </summary>
        [EnumMember(Value = "Found")]
        Found = 17,

        /// <summary>
        /// Enum SeeOther for value: SeeOther
        /// </summary>
        [EnumMember(Value = "SeeOther")]
        SeeOther = 18,

        /// <summary>
        /// Enum NotModified for value: NotModified
        /// </summary>
        [EnumMember(Value = "NotModified")]
        NotModified = 19,

        /// <summary>
        /// Enum UseProxy for value: UseProxy
        /// </summary>
        [EnumMember(Value = "UseProxy")]
        UseProxy = 20,

        /// <summary>
        /// Enum Unused for value: Unused
        /// </summary>
        [EnumMember(Value = "Unused")]
        Unused = 21,

        /// <summary>
        /// Enum TemporaryRedirect for value: TemporaryRedirect
        /// </summary>
        [EnumMember(Value = "TemporaryRedirect")]
        TemporaryRedirect = 22,

        /// <summary>
        /// Enum PermanentRedirect for value: PermanentRedirect
        /// </summary>
        [EnumMember(Value = "PermanentRedirect")]
        PermanentRedirect = 23,

        /// <summary>
        /// Enum BadRequest for value: BadRequest
        /// </summary>
        [EnumMember(Value = "BadRequest")]
        BadRequest = 24,

        /// <summary>
        /// Enum Unauthorized for value: Unauthorized
        /// </summary>
        [EnumMember(Value = "Unauthorized")]
        Unauthorized = 25,

        /// <summary>
        /// Enum PaymentRequired for value: PaymentRequired
        /// </summary>
        [EnumMember(Value = "PaymentRequired")]
        PaymentRequired = 26,

        /// <summary>
        /// Enum Forbidden for value: Forbidden
        /// </summary>
        [EnumMember(Value = "Forbidden")]
        Forbidden = 27,

        /// <summary>
        /// Enum NotFound for value: NotFound
        /// </summary>
        [EnumMember(Value = "NotFound")]
        NotFound = 28,

        /// <summary>
        /// Enum MethodNotAllowed for value: MethodNotAllowed
        /// </summary>
        [EnumMember(Value = "MethodNotAllowed")]
        MethodNotAllowed = 29,

        /// <summary>
        /// Enum NotAcceptable for value: NotAcceptable
        /// </summary>
        [EnumMember(Value = "NotAcceptable")]
        NotAcceptable = 30,

        /// <summary>
        /// Enum ProxyAuthenticationRequired for value: ProxyAuthenticationRequired
        /// </summary>
        [EnumMember(Value = "ProxyAuthenticationRequired")]
        ProxyAuthenticationRequired = 31,

        /// <summary>
        /// Enum RequestTimeout for value: RequestTimeout
        /// </summary>
        [EnumMember(Value = "RequestTimeout")]
        RequestTimeout = 32,

        /// <summary>
        /// Enum Conflict for value: Conflict
        /// </summary>
        [EnumMember(Value = "Conflict")]
        Conflict = 33,

        /// <summary>
        /// Enum Gone for value: Gone
        /// </summary>
        [EnumMember(Value = "Gone")]
        Gone = 34,

        /// <summary>
        /// Enum LengthRequired for value: LengthRequired
        /// </summary>
        [EnumMember(Value = "LengthRequired")]
        LengthRequired = 35,

        /// <summary>
        /// Enum PreconditionFailed for value: PreconditionFailed
        /// </summary>
        [EnumMember(Value = "PreconditionFailed")]
        PreconditionFailed = 36,

        /// <summary>
        /// Enum RequestEntityTooLarge for value: RequestEntityTooLarge
        /// </summary>
        [EnumMember(Value = "RequestEntityTooLarge")]
        RequestEntityTooLarge = 37,

        /// <summary>
        /// Enum RequestUriTooLong for value: RequestUriTooLong
        /// </summary>
        [EnumMember(Value = "RequestUriTooLong")]
        RequestUriTooLong = 38,

        /// <summary>
        /// Enum UnsupportedMediaType for value: UnsupportedMediaType
        /// </summary>
        [EnumMember(Value = "UnsupportedMediaType")]
        UnsupportedMediaType = 39,

        /// <summary>
        /// Enum RequestedRangeNotSatisfiable for value: RequestedRangeNotSatisfiable
        /// </summary>
        [EnumMember(Value = "RequestedRangeNotSatisfiable")]
        RequestedRangeNotSatisfiable = 40,

        /// <summary>
        /// Enum ExpectationFailed for value: ExpectationFailed
        /// </summary>
        [EnumMember(Value = "ExpectationFailed")]
        ExpectationFailed = 41,

        /// <summary>
        /// Enum MisdirectedRequest for value: MisdirectedRequest
        /// </summary>
        [EnumMember(Value = "MisdirectedRequest")]
        MisdirectedRequest = 42,

        /// <summary>
        /// Enum UnprocessableEntity for value: UnprocessableEntity
        /// </summary>
        [EnumMember(Value = "UnprocessableEntity")]
        UnprocessableEntity = 43,

        /// <summary>
        /// Enum Locked for value: Locked
        /// </summary>
        [EnumMember(Value = "Locked")]
        Locked = 44,

        /// <summary>
        /// Enum FailedDependency for value: FailedDependency
        /// </summary>
        [EnumMember(Value = "FailedDependency")]
        FailedDependency = 45,

        /// <summary>
        /// Enum UpgradeRequired for value: UpgradeRequired
        /// </summary>
        [EnumMember(Value = "UpgradeRequired")]
        UpgradeRequired = 46,

        /// <summary>
        /// Enum PreconditionRequired for value: PreconditionRequired
        /// </summary>
        [EnumMember(Value = "PreconditionRequired")]
        PreconditionRequired = 47,

        /// <summary>
        /// Enum TooManyRequests for value: TooManyRequests
        /// </summary>
        [EnumMember(Value = "TooManyRequests")]
        TooManyRequests = 48,

        /// <summary>
        /// Enum RequestHeaderFieldsTooLarge for value: RequestHeaderFieldsTooLarge
        /// </summary>
        [EnumMember(Value = "RequestHeaderFieldsTooLarge")]
        RequestHeaderFieldsTooLarge = 49,

        /// <summary>
        /// Enum UnavailableForLegalReasons for value: UnavailableForLegalReasons
        /// </summary>
        [EnumMember(Value = "UnavailableForLegalReasons")]
        UnavailableForLegalReasons = 50,

        /// <summary>
        /// Enum InternalServerError for value: InternalServerError
        /// </summary>
        [EnumMember(Value = "InternalServerError")]
        InternalServerError = 51,

        /// <summary>
        /// Enum NotImplemented for value: NotImplemented
        /// </summary>
        [EnumMember(Value = "NotImplemented")]
        NotImplemented = 52,

        /// <summary>
        /// Enum BadGateway for value: BadGateway
        /// </summary>
        [EnumMember(Value = "BadGateway")]
        BadGateway = 53,

        /// <summary>
        /// Enum ServiceUnavailable for value: ServiceUnavailable
        /// </summary>
        [EnumMember(Value = "ServiceUnavailable")]
        ServiceUnavailable = 54,

        /// <summary>
        /// Enum GatewayTimeout for value: GatewayTimeout
        /// </summary>
        [EnumMember(Value = "GatewayTimeout")]
        GatewayTimeout = 55,

        /// <summary>
        /// Enum HttpVersionNotSupported for value: HttpVersionNotSupported
        /// </summary>
        [EnumMember(Value = "HttpVersionNotSupported")]
        HttpVersionNotSupported = 56,

        /// <summary>
        /// Enum VariantAlsoNegotiates for value: VariantAlsoNegotiates
        /// </summary>
        [EnumMember(Value = "VariantAlsoNegotiates")]
        VariantAlsoNegotiates = 57,

        /// <summary>
        /// Enum InsufficientStorage for value: InsufficientStorage
        /// </summary>
        [EnumMember(Value = "InsufficientStorage")]
        InsufficientStorage = 58,

        /// <summary>
        /// Enum LoopDetected for value: LoopDetected
        /// </summary>
        [EnumMember(Value = "LoopDetected")]
        LoopDetected = 59,

        /// <summary>
        /// Enum NotExtended for value: NotExtended
        /// </summary>
        [EnumMember(Value = "NotExtended")]
        NotExtended = 60,

        /// <summary>
        /// Enum NetworkAuthenticationRequired for value: NetworkAuthenticationRequired
        /// </summary>
        [EnumMember(Value = "NetworkAuthenticationRequired")]
        NetworkAuthenticationRequired = 61

    }

}
