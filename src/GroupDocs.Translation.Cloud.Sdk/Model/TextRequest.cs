/*
 * GroupDocs.Translation SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.11.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Translation.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Translation.Cloud.Sdk.Model
{
    /// <summary>
    /// TextRequest
    /// </summary>
    [DataContract(Name = "TextRequest")]
    public partial class TextRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextRequest" /> class.
        /// </summary>
        /// <param name="sourceLanguage">Language of original text.</param>
        /// <param name="targetLanguages">List of target languages.</param>
        /// <param name="texts">Text array to translate.</param>
        /// <param name="origin">For analysis only.</param>
        /// <param name="containsMarkdown">Set to true if you want to handle markdown in text.</param>
        public TextRequest(string sourceLanguage = default(string), List<string> targetLanguages = default(List<string>), List<string> texts = default(List<string>), string origin = default(string), bool containsMarkdown = default(bool))
        {
            this.SourceLanguage = sourceLanguage;
            this.TargetLanguages = targetLanguages;
            this.Texts = texts;
            this.Origin = origin;
            this.ContainsMarkdown = containsMarkdown;
        }

        /// <summary>
        /// Language of original text
        /// </summary>
        /// <value>Language of original text</value>
        [DataMember(Name = "sourceLanguage", EmitDefaultValue = true)]
        public string SourceLanguage { get; set; }

        /// <summary>
        /// List of target languages
        /// </summary>
        /// <value>List of target languages</value>
        [DataMember(Name = "targetLanguages", EmitDefaultValue = true)]
        public List<string> TargetLanguages { get; set; }

        /// <summary>
        /// Text array to translate
        /// </summary>
        /// <value>Text array to translate</value>
        [DataMember(Name = "texts", EmitDefaultValue = true)]
        public List<string> Texts { get; set; }

        /// <summary>
        /// For analysis only
        /// </summary>
        /// <value>For analysis only</value>
        [DataMember(Name = "origin", EmitDefaultValue = true)]
        public string Origin { get; set; }

        /// <summary>
        /// Set to true if you want to handle markdown in text
        /// </summary>
        /// <value>Set to true if you want to handle markdown in text</value>
        [DataMember(Name = "containsMarkdown", EmitDefaultValue = true)]
        public bool ContainsMarkdown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextRequest {\n");
            sb.Append("  SourceLanguage: ").Append(SourceLanguage).Append("\n");
            sb.Append("  TargetLanguages: ").Append(TargetLanguages).Append("\n");
            sb.Append("  Texts: ").Append(Texts).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ContainsMarkdown: ").Append(ContainsMarkdown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
