/*
 * GroupDocs.Translation SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.11.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupDocs.Translation.Cloud.Sdk.Client;
using GroupDocs.Translation.Cloud.Sdk.Client.Auth;
using GroupDocs.Translation.Cloud.Sdk.Model;

namespace GroupDocs.Translation.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranslationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Translate any supported file
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse AutoPost(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate any supported file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> AutoPostWithHttpInfo(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate CSV and TSV files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse CsvPost(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate CSV and TSV files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> CsvPostWithHttpInfo(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DocumentPost(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DocumentPostWithHttpInfo(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        CloudFileResponse DocumentTrialGet(string? requestId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        ApiResponse<CloudFileResponse> DocumentTrialGetWithHttpInfo(string? requestId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols.
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DocumentTrialPost(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DocumentTrialPostWithHttpInfo(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckStatus</returns>
        HealthCheckStatus HcGet(int operationIndex = 0);

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckStatus</returns>
        ApiResponse<HealthCheckStatus> HcGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Translate HTML files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse HtmlPost(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate HTML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> HtmlPostWithHttpInfo(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Get hugo syntax structure from markdown file
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudHugoResponse</returns>
        CloudHugoResponse HugoGet(string? id = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get hugo syntax structure from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudHugoResponse</returns>
        ApiResponse<CloudHugoResponse> HugoGetWithHttpInfo(string? id = default(string?), int operationIndex = 0);
        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse HugoPost(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0);

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> HugoPostWithHttpInfo(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate image or scanned pdf and return file
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse ImageToFilePost(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate image or scanned pdf and return file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> ImageToFilePostWithHttpInfo(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate text on image or scanned pdf
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse ImageToTextPost(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate text on image or scanned pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> ImageToTextPostWithHttpInfo(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0);
        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LanguagePairData&gt;</returns>
        List<LanguagePairData> LanguagesGet(int operationIndex = 0);

        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LanguagePairData&gt;</returns>
        ApiResponse<List<LanguagePairData>> LanguagesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Translate Markdown files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse MarkdownPost(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Markdown files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> MarkdownPostWithHttpInfo(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate audio or video and return file as a result
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse MediaToFilePost(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate audio or video and return file as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> MediaToFilePostWithHttpInfo(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate audio or video and return text as a result
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse MediaToTextPost(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate audio or video and return text as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> MediaToTextPostWithHttpInfo(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate pdf files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse PdfPost(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate pdf files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> PdfPostWithHttpInfo(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format.
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse PdfTrialPost(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> PdfTrialPostWithHttpInfo(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse PresentationPost(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> PresentationPostWithHttpInfo(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate Resx files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse ResxPost(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Resx files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> ResxPostWithHttpInfo(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate Microsoft Excel workbooks, ods
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SpreadsheetPost(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SpreadsheetPostWithHttpInfo(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate Srt files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SrtPost(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate Srt files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SrtPostWithHttpInfo(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate text
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse TextPost(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> TextPostWithHttpInfo(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0);
        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        CloudTextResponse TextTrialGet(string? requestId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        ApiResponse<CloudTextResponse> TextTrialGetWithHttpInfo(string? requestId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Trial translate text. Translate only 1000 symbols.
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse TextTrialPost(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0);

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> TextTrialPostWithHttpInfo(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0);
        /// <summary>
        /// Translate XML files
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse XmlPost(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0);

        /// <summary>
        /// Translate XML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> XmlPostWithHttpInfo(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranslationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Translate any supported file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> AutoPostAsync(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate any supported file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> AutoPostWithHttpInfoAsync(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate CSV and TSV files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> CsvPostAsync(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate CSV and TSV files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> CsvPostWithHttpInfoAsync(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        System.Threading.Tasks.Task<CloudFileResponse> DocumentTrialGetAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFileResponse>> DocumentTrialGetWithHttpInfoAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DocumentTrialPostAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DocumentTrialPostWithHttpInfoAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckStatus</returns>
        System.Threading.Tasks.Task<HealthCheckStatus> HcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckStatus>> HcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate HTML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> HtmlPostAsync(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate HTML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> HtmlPostWithHttpInfoAsync(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get hugo syntax structure from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudHugoResponse</returns>
        System.Threading.Tasks.Task<CloudHugoResponse> HugoGetAsync(string? id = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get hugo syntax structure from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudHugoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudHugoResponse>> HugoGetWithHttpInfoAsync(string? id = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> HugoPostAsync(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> HugoPostWithHttpInfoAsync(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate image or scanned pdf and return file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> ImageToFilePostAsync(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate image or scanned pdf and return file
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> ImageToFilePostWithHttpInfoAsync(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate text on image or scanned pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> ImageToTextPostAsync(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate text on image or scanned pdf
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> ImageToTextPostWithHttpInfoAsync(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LanguagePairData&gt;</returns>
        System.Threading.Tasks.Task<List<LanguagePairData>> LanguagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LanguagePairData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LanguagePairData>>> LanguagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Markdown files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> MarkdownPostAsync(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Markdown files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> MarkdownPostWithHttpInfoAsync(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate audio or video and return file as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> MediaToFilePostAsync(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate audio or video and return file as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> MediaToFilePostWithHttpInfoAsync(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate audio or video and return text as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> MediaToTextPostAsync(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate audio or video and return text as a result
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> MediaToTextPostWithHttpInfoAsync(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate pdf files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> PdfPostAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate pdf files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> PdfPostWithHttpInfoAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> PdfTrialPostAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> PdfTrialPostWithHttpInfoAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> PresentationPostAsync(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> PresentationPostWithHttpInfoAsync(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Resx files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> ResxPostAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Resx files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> ResxPostWithHttpInfoAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Microsoft Excel workbooks, ods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SpreadsheetPostAsync(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SpreadsheetPostWithHttpInfoAsync(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate Srt files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SrtPostAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate Srt files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SrtPostWithHttpInfoAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> TextPostAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        System.Threading.Tasks.Task<CloudTextResponse> TextTrialGetAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudTextResponse>> TextTrialGetWithHttpInfoAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Trial translate text. Translate only 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> TextTrialPostAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> TextTrialPostWithHttpInfoAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Translate XML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> XmlPostAsync(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Translate XML files
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> XmlPostWithHttpInfoAsync(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITranslationApi : ITranslationApiSync, ITranslationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TranslationApi : ITranslationApi
    {
        private GroupDocs.Translation.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranslationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TranslationApi(string basePath)
        {
            this.Configuration = GroupDocs.Translation.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Translation.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new GroupDocs.Translation.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupDocs.Translation.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Translation.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupDocs.Translation.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TranslationApi(GroupDocs.Translation.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupDocs.Translation.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Translation.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupDocs.Translation.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Translation.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupDocs.Translation.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TranslationApi(GroupDocs.Translation.Cloud.Sdk.Client.ISynchronousClient client, GroupDocs.Translation.Cloud.Sdk.Client.IAsynchronousClient asyncClient, GroupDocs.Translation.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupDocs.Translation.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupDocs.Translation.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupDocs.Translation.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupDocs.Translation.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupDocs.Translation.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Translate any supported file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse AutoPost(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = AutoPostWithHttpInfo(fileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate any supported file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> AutoPostWithHttpInfo(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fileRequest;

            localVarRequestOptions.Operation = "TranslationApi.AutoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/auto", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate any supported file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> AutoPostAsync(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await AutoPostWithHttpInfoAsync(fileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate any supported file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> AutoPostWithHttpInfoAsync(FileRequest? fileRequest = default(FileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = fileRequest;

            localVarRequestOptions.Operation = "TranslationApi.AutoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/auto", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AutoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate CSV and TSV files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse CsvPost(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = CsvPostWithHttpInfo(csvFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate CSV and TSV files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> CsvPostWithHttpInfo(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = csvFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.CsvPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/csv", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CsvPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate CSV and TSV files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> CsvPostAsync(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await CsvPostWithHttpInfoAsync(csvFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate CSV and TSV files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> CsvPostWithHttpInfoAsync(CsvFileRequest? csvFileRequest = default(CsvFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = csvFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.CsvPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/csv", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CsvPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DocumentPost(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = DocumentPostWithHttpInfo(textDocumentFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> DocumentPostWithHttpInfo(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textDocumentFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await DocumentPostWithHttpInfoAsync(textDocumentFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft Word documents, rtf, txt, odt 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textDocumentFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        public CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = DocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TranslationApi->DocumentRequestIdGet");
            }

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TranslationApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        public async System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = await DocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TranslationApi->DocumentRequestIdGet");
            }


            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TranslationApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        public CloudFileResponse DocumentTrialGet(string? requestId = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = DocumentTrialGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> DocumentTrialGetWithHttpInfo(string? requestId = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));
            }

            localVarRequestOptions.Operation = "TranslationApi.DocumentTrialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFileResponse>("/document/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentTrialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        public async System.Threading.Tasks.Task<CloudFileResponse> DocumentTrialGetAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = await DocumentTrialGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status for trial request.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudFileResponse>> DocumentTrialGetWithHttpInfoAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));
            }

            localVarRequestOptions.Operation = "TranslationApi.DocumentTrialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFileResponse>("/document/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentTrialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DocumentTrialPost(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = DocumentTrialPostWithHttpInfo(textDocumentFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> DocumentTrialPostWithHttpInfo(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textDocumentFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.DocumentTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/document/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DocumentTrialPostAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await DocumentTrialPostWithHttpInfoAsync(textDocumentFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial translate Microsoft Word documents, rtf, txt, odt without conversation. Translate only first page or 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textDocumentFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> DocumentTrialPostWithHttpInfoAsync(TextDocumentFileRequest? textDocumentFileRequest = default(TextDocumentFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textDocumentFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.DocumentTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/document/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckStatus</returns>
        public HealthCheckStatus HcGet(int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<HealthCheckStatus> localVarResponse = HcGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckStatus</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<HealthCheckStatus> HcGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TranslationApi.HcGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HealthCheckStatus>("/hc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckStatus</returns>
        public async System.Threading.Tasks.Task<HealthCheckStatus> HcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<HealthCheckStatus> localVarResponse = await HcGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckStatus)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<HealthCheckStatus>> HcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TranslationApi.HcGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheckStatus>("/hc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate HTML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse HtmlPost(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = HtmlPostWithHttpInfo(htmlFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate HTML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> HtmlPostWithHttpInfo(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = htmlFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.HtmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/html", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HtmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate HTML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> HtmlPostAsync(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await HtmlPostWithHttpInfoAsync(htmlFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate HTML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="htmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> HtmlPostWithHttpInfoAsync(HtmlFileRequest? htmlFileRequest = default(HtmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = htmlFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.HtmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/html", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HtmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get hugo syntax structure from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudHugoResponse</returns>
        public CloudHugoResponse HugoGet(string? id = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudHugoResponse> localVarResponse = HugoGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get hugo syntax structure from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudHugoResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudHugoResponse> HugoGetWithHttpInfo(string? id = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "TranslationApi.HugoGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudHugoResponse>("/hugo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HugoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get hugo syntax structure from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudHugoResponse</returns>
        public async System.Threading.Tasks.Task<CloudHugoResponse> HugoGetAsync(string? id = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudHugoResponse> localVarResponse = await HugoGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get hugo syntax structure from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id from PostHugo&gt; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudHugoResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudHugoResponse>> HugoGetWithHttpInfoAsync(string? id = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "TranslationApi.HugoGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudHugoResponse>("/hugo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HugoGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse HugoPost(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = HugoPostWithHttpInfo(hugoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> HugoPostWithHttpInfo(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hugoRequest;

            localVarRequestOptions.Operation = "TranslationApi.HugoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/hugo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HugoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> HugoPostAsync(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await HugoPostWithHttpInfoAsync(hugoRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run hugo syntax structure analyzing from markdown file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hugoRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> HugoPostWithHttpInfoAsync(HugoRequest? hugoRequest = default(HugoRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = hugoRequest;

            localVarRequestOptions.Operation = "TranslationApi.HugoPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/hugo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("HugoPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate image or scanned pdf and return file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse ImageToFilePost(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = ImageToFilePostWithHttpInfo(imageToFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate image or scanned pdf and return file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> ImageToFilePostWithHttpInfo(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = imageToFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.ImageToFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/image-to-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageToFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate image or scanned pdf and return file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> ImageToFilePostAsync(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await ImageToFilePostWithHttpInfoAsync(imageToFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate image or scanned pdf and return file 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> ImageToFilePostWithHttpInfoAsync(ImageToFileRequest? imageToFileRequest = default(ImageToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = imageToFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.ImageToFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/image-to-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageToFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text on image or scanned pdf 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse ImageToTextPost(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = ImageToTextPostWithHttpInfo(imageToTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text on image or scanned pdf 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> ImageToTextPostWithHttpInfo(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = imageToTextRequest;

            localVarRequestOptions.Operation = "TranslationApi.ImageToTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/image-to-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageToTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text on image or scanned pdf 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> ImageToTextPostAsync(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await ImageToTextPostWithHttpInfoAsync(imageToTextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text on image or scanned pdf 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> ImageToTextPostWithHttpInfoAsync(ImageToTextRequest? imageToTextRequest = default(ImageToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = imageToTextRequest;

            localVarRequestOptions.Operation = "TranslationApi.ImageToTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/image-to-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImageToTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LanguagePairData&gt;</returns>
        public List<LanguagePairData> LanguagesGet(int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<List<LanguagePairData>> localVarResponse = LanguagesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LanguagePairData&gt;</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<List<LanguagePairData>> LanguagesGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TranslationApi.LanguagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LanguagePairData>>("/languages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LanguagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LanguagePairData&gt;</returns>
        public async System.Threading.Tasks.Task<List<LanguagePairData>> LanguagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<List<LanguagePairData>> localVarResponse = await LanguagesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LanguagePairData&gt;)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<List<LanguagePairData>>> LanguagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TranslationApi.LanguagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LanguagePairData>>("/languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LanguagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Markdown files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse MarkdownPost(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = MarkdownPostWithHttpInfo(markdownFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Markdown files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> MarkdownPostWithHttpInfo(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = markdownFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.MarkdownPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/markdown", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkdownPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Markdown files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> MarkdownPostAsync(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await MarkdownPostWithHttpInfoAsync(markdownFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Markdown files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markdownFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> MarkdownPostWithHttpInfoAsync(MarkdownFileRequest? markdownFileRequest = default(MarkdownFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = markdownFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.MarkdownPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/markdown", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkdownPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate audio or video and return file as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse MediaToFilePost(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = MediaToFilePostWithHttpInfo(mediaToFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate audio or video and return file as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> MediaToFilePostWithHttpInfo(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mediaToFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.MediaToFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/media-to-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MediaToFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate audio or video and return file as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> MediaToFilePostAsync(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await MediaToFilePostWithHttpInfoAsync(mediaToFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate audio or video and return file as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> MediaToFilePostWithHttpInfoAsync(MediaToFileRequest? mediaToFileRequest = default(MediaToFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mediaToFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.MediaToFilePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/media-to-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MediaToFilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate audio or video and return text as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse MediaToTextPost(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = MediaToTextPostWithHttpInfo(mediaToTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate audio or video and return text as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> MediaToTextPostWithHttpInfo(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mediaToTextRequest;

            localVarRequestOptions.Operation = "TranslationApi.MediaToTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/media-to-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MediaToTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate audio or video and return text as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> MediaToTextPostAsync(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await MediaToTextPostWithHttpInfoAsync(mediaToTextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate audio or video and return text as a result 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediaToTextRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> MediaToTextPostWithHttpInfoAsync(MediaToTextRequest? mediaToTextRequest = default(MediaToTextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mediaToTextRequest;

            localVarRequestOptions.Operation = "TranslationApi.MediaToTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/media-to-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MediaToTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate pdf files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse PdfPost(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = PdfPostWithHttpInfo(pdfFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate pdf files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> PdfPostWithHttpInfo(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pdfFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PdfPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/pdf", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate pdf files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> PdfPostAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await PdfPostWithHttpInfoAsync(pdfFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate pdf files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> PdfPostWithHttpInfoAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pdfFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PdfPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/pdf", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse PdfTrialPost(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = PdfTrialPostWithHttpInfo(pdfFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> PdfTrialPostWithHttpInfo(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pdfFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PdfTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/pdf/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> PdfTrialPostAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await PdfTrialPostWithHttpInfoAsync(pdfFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial pdf translation. Translate only first page without conversion to another format. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> PdfTrialPostWithHttpInfoAsync(PdfFileRequest? pdfFileRequest = default(PdfFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = pdfFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PdfTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/pdf/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PdfTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse PresentationPost(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = PresentationPostWithHttpInfo(presentationFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> PresentationPostWithHttpInfo(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = presentationFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PresentationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/presentation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PresentationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> PresentationPostAsync(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await PresentationPostWithHttpInfoAsync(presentationFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft PowerPoint presentations, odp 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="presentationFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> PresentationPostWithHttpInfoAsync(PresentationFileRequest? presentationFileRequest = default(PresentationFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = presentationFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.PresentationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/presentation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PresentationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Resx files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse ResxPost(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = ResxPostWithHttpInfo(srtFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Resx files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> ResxPostWithHttpInfo(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = srtFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.ResxPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/resx", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResxPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Resx files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> ResxPostAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await ResxPostWithHttpInfoAsync(srtFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Resx files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> ResxPostWithHttpInfoAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = srtFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.ResxPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/resx", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResxPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SpreadsheetPost(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SpreadsheetPostWithHttpInfo(spreadsheetFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> SpreadsheetPostWithHttpInfo(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = spreadsheetFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.SpreadsheetPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/spreadsheet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpreadsheetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SpreadsheetPostAsync(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SpreadsheetPostWithHttpInfoAsync(spreadsheetFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Microsoft Excel workbooks, ods 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spreadsheetFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SpreadsheetPostWithHttpInfoAsync(SpreadsheetFileRequest? spreadsheetFileRequest = default(SpreadsheetFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = spreadsheetFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.SpreadsheetPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/spreadsheet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpreadsheetPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Srt files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SrtPost(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SrtPostWithHttpInfo(srtFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Srt files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> SrtPostWithHttpInfo(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = srtFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.SrtPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/srt", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SrtPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate Srt files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SrtPostAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SrtPostWithHttpInfoAsync(srtFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate Srt files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="srtFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SrtPostWithHttpInfoAsync(SrtFileRequest? srtFileRequest = default(SrtFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = srtFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.SrtPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/srt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SrtPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse TextPost(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = TextPostWithHttpInfo(textRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> TextPostWithHttpInfo(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "TranslationApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> TextPostAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await TextPostWithHttpInfoAsync(textRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "TranslationApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        public CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = TextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TranslationApi->TextRequestIdGet");
            }

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TranslationApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        public async System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = await TextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TranslationApi->TextRequestIdGet");
            }


            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TranslationApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        public CloudTextResponse TextTrialGet(string? requestId = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = TextTrialGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> TextTrialGetWithHttpInfo(string? requestId = default(string?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));
            }

            localVarRequestOptions.Operation = "TranslationApi.TextTrialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudTextResponse>("/text/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextTrialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        public async System.Threading.Tasks.Task<CloudTextResponse> TextTrialGetAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = await TextTrialGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status for trial requests.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<CloudTextResponse>> TextTrialGetWithHttpInfoAsync(string? requestId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (requestId != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));
            }

            localVarRequestOptions.Operation = "TranslationApi.TextTrialGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudTextResponse>("/text/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextTrialGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse TextTrialPost(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = TextTrialPostWithHttpInfo(textRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> TextTrialPostWithHttpInfo(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "TranslationApi.TextTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/text/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> TextTrialPostAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await TextTrialPostWithHttpInfoAsync(textRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial translate text. Translate only 1000 symbols. 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> TextTrialPostWithHttpInfoAsync(TextRequest? textRequest = default(TextRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "TranslationApi.TextTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/text/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate XML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse XmlPost(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = XmlPostWithHttpInfo(xmlFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate XML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> XmlPostWithHttpInfo(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0)
        {
            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = xmlFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.XmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/xml", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("XmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate XML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> XmlPostAsync(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await XmlPostWithHttpInfoAsync(xmlFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate XML files 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlFileRequest">String in body of request, containing JSON with parameters for translation. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Cloud.Sdk.Client.ApiResponse<StatusResponse>> XmlPostWithHttpInfoAsync(XmlFileRequest? xmlFileRequest = default(XmlFileRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = xmlFileRequest;

            localVarRequestOptions.Operation = "TranslationApi.XmlPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/xml", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("XmlPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
