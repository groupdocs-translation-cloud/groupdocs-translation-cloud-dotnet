/*
 * GroupDocs.Translation.ApiGateway.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupDocs.Translation.Api.Client;
using GroupDocs.Translation.Api.Client.Auth;
using GroupDocs.Translation.Api.Model;

namespace GroupDocs.Translation.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Translate document
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DocumentPost(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0);

        /// <summary>
        /// Translate document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DocumentPostWithHttpInfo(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0);
        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LanguagePairData&gt;</returns>
        List<LanguagePairData> ListOfAvailableLanguagesGet(int operationIndex = 0);

        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LanguagePairData&gt;</returns>
        ApiResponse<List<LanguagePairData>> ListOfAvailableLanguagesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Translate text
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse TextPost(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0);

        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> TextPostWithHttpInfo(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0);
        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Translate document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LanguagePairData&gt;</returns>
        System.Threading.Tasks.Task<List<LanguagePairData>> ListOfAvailableLanguagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return list of available language pairs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LanguagePairData&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LanguagePairData>>> ListOfAvailableLanguagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> TextPostAsync(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Translate text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApi : ITransportApiSync, ITransportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransportApi : ITransportApi
    {
        private GroupDocs.Translation.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransportApi(string basePath)
        {
            this.Configuration = GroupDocs.Translation.Api.Client.Configuration.MergeConfigurations(
                GroupDocs.Translation.Api.Client.GlobalConfiguration.Instance,
                new GroupDocs.Translation.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupDocs.Translation.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Translation.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupDocs.Translation.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransportApi(GroupDocs.Translation.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupDocs.Translation.Api.Client.Configuration.MergeConfigurations(
                GroupDocs.Translation.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupDocs.Translation.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Translation.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupDocs.Translation.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransportApi(GroupDocs.Translation.Api.Client.ISynchronousClient client, GroupDocs.Translation.Api.Client.IAsynchronousClient asyncClient, GroupDocs.Translation.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupDocs.Translation.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupDocs.Translation.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupDocs.Translation.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupDocs.Translation.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupDocs.Translation.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Translate document 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DocumentPost(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> localVarResponse = DocumentPostWithHttpInfo(outFormat, source, targets, file, format, url, masters, origin, elements, savingMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate document 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> DocumentPostWithHttpInfo(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'source' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'targets' is set
            if (targets == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'targets' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DocumentPost");
            }

            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Source", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(source)); // form parameter
            localVarRequestOptions.FormParameters.Add("Targets", GroupDocs.Translation.Api.Client.ClientUtils.Serialize(targets)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (masters != null)
            {
                localVarRequestOptions.FormParameters.Add("Masters", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(masters)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (elements != null)
            {
                localVarRequestOptions.FormParameters.Add("Elements", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(elements)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate document 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> localVarResponse = await DocumentPostWithHttpInfoAsync(outFormat, source, targets, file, format, url, masters, origin, elements, savingMode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate document 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="source">Language of original file</param>
        /// <param name="targets">List of target languages</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for translation (optional)</param>
        /// <param name="masters">If translate master slides (optional, default to false)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="elements">List of slides to translate (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(string outFormat, string source, List<string> targets, System.IO.Stream file, string format = default(string), string url = default(string), bool? masters = default(bool?), string origin = default(string), List<int> elements = default(List<int>), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'source' is set
            if (source == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'source' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'targets' is set
            if (targets == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'targets' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DocumentPost");
            }


            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Source", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(source)); // form parameter
            localVarRequestOptions.FormParameters.Add("Targets", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(targets)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (masters != null)
            {
                localVarRequestOptions.FormParameters.Add("Masters", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(masters)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (elements != null)
            {
                localVarRequestOptions.FormParameters.Add("Elements", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(elements)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        public CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.ApiResponse<CloudFileResponse> localVarResponse = DocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        public GroupDocs.Translation.Api.Client.ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DocumentRequestIdGet");
            }

            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        public async System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Api.Client.ApiResponse<CloudFileResponse> localVarResponse = await DocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document translation status.  Also return URLs for downloading of translated document if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Api.Client.ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DocumentRequestIdGet");
            }


            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LanguagePairData&gt;</returns>
        public List<LanguagePairData> ListOfAvailableLanguagesGet(int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.ApiResponse<List<LanguagePairData>> localVarResponse = ListOfAvailableLanguagesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LanguagePairData&gt;</returns>
        public GroupDocs.Translation.Api.Client.ApiResponse<List<LanguagePairData>> ListOfAvailableLanguagesGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.ListOfAvailableLanguagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<LanguagePairData>>("/listOfAvailableLanguages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOfAvailableLanguagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LanguagePairData&gt;</returns>
        public async System.Threading.Tasks.Task<List<LanguagePairData>> ListOfAvailableLanguagesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Api.Client.ApiResponse<List<LanguagePairData>> localVarResponse = await ListOfAvailableLanguagesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return list of available language pairs 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LanguagePairData&gt;)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Api.Client.ApiResponse<List<LanguagePairData>>> ListOfAvailableLanguagesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.ListOfAvailableLanguagesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<LanguagePairData>>("/listOfAvailableLanguages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOfAvailableLanguagesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse TextPost(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> localVarResponse = TextPostWithHttpInfo(source, targets, text, texts, origin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> TextPostWithHttpInfo(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (source != null)
            {
                localVarRequestOptions.FormParameters.Add("Source", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(source)); // form parameter
            }
            if (targets != null)
            {
                localVarRequestOptions.FormParameters.Add("Targets", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(targets)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> TextPostAsync(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse> localVarResponse = await TextPostWithHttpInfoAsync(source, targets, text, texts, origin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Translate text 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Language of original text (optional)</param>
        /// <param name="targets">List of target languages (optional)</param>
        /// <param name="text">Text to translate (optional)</param>
        /// <param name="texts">Text array to translate (optional)</param>
        /// <param name="origin">For analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Api.Client.ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (source != null)
            {
                localVarRequestOptions.FormParameters.Add("Source", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(source)); // form parameter
            }
            if (targets != null)
            {
                localVarRequestOptions.FormParameters.Add("Targets", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(targets)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        public CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Translation.Api.Client.ApiResponse<CloudTextResponse> localVarResponse = TextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        public GroupDocs.Translation.Api.Client.ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->TextRequestIdGet");
            }

            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        public async System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Translation.Api.Client.ApiResponse<CloudTextResponse> localVarResponse = await TextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text translation status.  Also return translated text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Translation.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/translation/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Translation.Api.Client.ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Translation.Api.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->TextRequestIdGet");
            }


            GroupDocs.Translation.Api.Client.RequestOptions localVarRequestOptions = new GroupDocs.Translation.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Translation.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Translation.Api.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JWT) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
