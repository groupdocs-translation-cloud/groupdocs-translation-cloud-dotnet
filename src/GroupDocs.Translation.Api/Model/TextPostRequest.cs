/*
 * GroupDocs.Translation.ApiGateway.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Translation.Api.Client.OpenAPIDateConverter;

namespace GroupDocs.Translation.Api.Model
{
    /// <summary>
    /// TextPostRequest
    /// </summary>
    [DataContract(Name = "_text_post_request")]
    public partial class TextPostRequest : IEquatable<TextPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextPostRequest" /> class.
        /// </summary>
        /// <param name="source">Language of original text.</param>
        /// <param name="targets">List of target languages.</param>
        /// <param name="text">Text to translate.</param>
        /// <param name="texts">Text array to translate.</param>
        /// <param name="origin">For analysis only.</param>
        public TextPostRequest(string source = default(string), List<string> targets = default(List<string>), string text = default(string), List<string> texts = default(List<string>), string origin = default(string))
        {
            this.Source = source;
            this.Targets = targets;
            this.Text = text;
            this.Texts = texts;
            this.Origin = origin;
        }

        /// <summary>
        /// Language of original text
        /// </summary>
        /// <value>Language of original text</value>
        [DataMember(Name = "Source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// List of target languages
        /// </summary>
        /// <value>List of target languages</value>
        [DataMember(Name = "Targets", EmitDefaultValue = false)]
        public List<string> Targets { get; set; }

        /// <summary>
        /// Text to translate
        /// </summary>
        /// <value>Text to translate</value>
        [DataMember(Name = "Text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Text array to translate
        /// </summary>
        /// <value>Text array to translate</value>
        [DataMember(Name = "Texts", EmitDefaultValue = false)]
        public List<string> Texts { get; set; }

        /// <summary>
        /// For analysis only
        /// </summary>
        /// <value>For analysis only</value>
        [DataMember(Name = "Origin", EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextPostRequest {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Texts: ").Append(Texts).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextPostRequest);
        }

        /// <summary>
        /// Returns true if TextPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TextPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Targets == input.Targets ||
                    this.Targets != null &&
                    input.Targets != null &&
                    this.Targets.SequenceEqual(input.Targets)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Texts == input.Texts ||
                    this.Texts != null &&
                    input.Texts != null &&
                    this.Texts.SequenceEqual(input.Texts)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.Targets != null)
                {
                    hashCode = (hashCode * 59) + this.Targets.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Texts != null)
                {
                    hashCode = (hashCode * 59) + this.Texts.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
