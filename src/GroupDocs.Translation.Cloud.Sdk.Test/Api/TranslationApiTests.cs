/*
 * GroupDocs.Translation.ApiGateway.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading;
using RestSharp;
using Xunit;
using Microsoft.Extensions.Logging;
using GroupDocs.Translation.Cloud.Sdk.Client;
using GroupDocs.Translation.Cloud.Sdk.Api;
using GroupDocs.Translation.Cloud.Sdk.Client.Auth;
using GroupDocs.Translation.Cloud.Sdk.Extensions;
using GroupDocs.Translation.Cloud.Sdk.Model;
using Xunit.Abstractions;
using HttpStatusCode = System.Net.HttpStatusCode;

// uncomment below to import models
//using GroupDocs.Translation.Cloud.Sdk.Model;

namespace GroupDocs.Translation.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TranslationApiTests : IDisposable
    {
        private TranslationApi instance;
        private IFileApiAsync fileApi;
        private ILogger _logger;
        private readonly int Attempts;
        private List<string> targets;

        public TranslationApiTests(ITestOutputHelper outputHelper)
        {
            targets = new List<string>() { "es" };
            Attempts = 60;
            _logger = LoggerFactory
                .Create(builder => { builder.AddXunit(outputHelper); })
                .CreateLogger<TranslationApiTests>();
            var conf = new Configuration()
            {
                OAuthFlow = OAuthFlow.APPLICATION,
                OAuthClientId = "translate.app",
                OAuthClientSecret = "translate.app",
                OAuthTokenUrl = "https://id-qa.groupdocs.cloud/connect/token",
                //OAuthClientSecret = "translate.cloud",
                BasePath = "http://translation-api.qa.groupdocs.cloud/"
            };
            instance = new TranslationApi(conf);
            fileApi = new FileApi(conf);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransportApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransportApi
            //Assert.IsType<TransportApi>(instance);
        }

        [Fact]
        public void TrialPdfPostTest()
        {
            PdfFileRequest pdfFileRequest = new PdfFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: "pdf")
            {
                Url = GetUrl(@"TestData/TestPdf.pdf", "pdf", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                PreserveFormatting = true,
                SavingMode = PdfFileRequest.SavingModeEnum.Files,
                Pages = new List<int>() {1}
            };
            var client = new TranslationApi();
            var response = client.PdfTrialPost(pdfFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(TrialDocumentRequestIdGet(response.Id, Attempts, client));
        }

    /// <summary>
        /// Test AutoPost
        /// </summary>
        [Theory]
        [InlineData("TestData/TestWord.docx", FileRequest.FormatEnum.Docx, "docx")]
        public async void AutoPostTest(string path, FileRequest.FormatEnum format, string outputFormat)
        {
            var url = await fileApi.FileUploadPostAsync(format.ToString().ToLowerInvariant(), GetFile(path));
            var languages = await instance.LanguagesGetAsync();
            var fileName = GetFileName(path);
            FileRequest autoPostRequest = new FileRequest()
            {
                SourceLanguage = "en",
                TargetLanguages = targets,
                Format = format,
                OutputFormat = outputFormat,
                OriginalFileName = fileName
            };
            var response = instance.AutoPost(autoPostRequest);
            Assert.IsType<StatusResponse>(response);
        }
        /// <summary>
        /// Test MediaToFilePost
        /// </summary>
        [Fact]
        public void MediaToFilePostTest()
        {
            var file = File.OpenRead("./TestData/AudioTestEn.mp3");
            var url = fileApi.FileUploadPostAsync("mp3", file).Result;
            MediaToFileRequest audioRequest = new MediaToFileRequest(
                sourceLanguage: "en",
                targetLanguages: new List<string>() { "ru" },
                url: url,
                originalFileName: "AudioTestEn",
                origin: "test",
                outputFormat: "pdf",
                format: MediaToFileRequest.FormatEnum.Mp3);
            var response = instance.MediaToFilePost(audioRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test CsvPost
        /// </summary>
        [Fact]
        public void CsvPostTest()
        {
            var url = fileApi.FileUploadPostAsync("csv", GetFile(@"TestData/TestCsv.csv")).Result;
            CsvFileRequest csvFileRequest = new CsvFileRequest(
                "en",
                targets,
                outputFormat:"csv"
                )
            {
                Url = GetUrl(@"TestData/TestCsv.csv", "csv",  out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                Format = CsvFileRequest.FormatEnum.Csv,
                SavingMode = CsvFileRequest.SavingModeEnum.Files,
                Separator = ",",
            };
            var response = instance.CsvPost(csvFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test DocumentPost
        /// </summary>
        [Fact]
        public void DocumentPostTest()
        {
            TextDocumentFileRequest textDocumentFileRequest = new TextDocumentFileRequest(
                "en", 
                new List<string>(){"es"},
                outputFormat: "docx"
                )
            {
                Format = TextDocumentFileRequest.FormatEnum.Docx,
                Origin = "ApiTest",
                PreserveFormatting = true,
                SavingMode = TextDocumentFileRequest.SavingModeEnum.Files
            };
            var url = fileApi.FileUploadPostAsync("docx", GetFile(@"TestData/TestWord.docx")).Result;
            textDocumentFileRequest.Url = url;
            var response = instance.DocumentPost(textDocumentFileRequest);
            CloudFileResponse cloudFileResponse;
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        private bool TrialDocumentRequestIdGet(string id, int attempts, TranslationApi client)
        {
            bool success = false;
            for (int i = 0; i < attempts; i++)
            {
                var res = client.DocumentTrialGetWithHttpInfo(id);
                var response = res.Data;
                _logger.LogInformation($"Attempt {i}: {response.Status} - {response.Message}");
                if (response.Urls.Count > 0)
                {
                    success = true;
                    break;
                }
                Thread.Sleep(1000);
            }
            return success;
        }
        /// <summary>
        /// Test DocumentRequestIdGet
        /// </summary>
        private bool DocumentRequestIdGet(string id, int attempts)
        {
            bool success = false;
            for (int i = 0; i < attempts; i++)
            {
                var response = instance.DocumentRequestIdGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Status} - {response.Message}");
                if (response.Urls.Count > 0)
                {
                    success = true;
                    break;
                }
                Thread.Sleep(1000);
            }
            return success;
        }

        /// <summary>
        /// Test HcGet
        /// </summary>
        [Fact]
        public void HcGetTest()
        {
            var response = instance.HcGet();
            Assert.IsType<HealthCheckStatus>(response);
        }

        /// <summary>
        /// Test HtmlPost
        /// </summary>
        [Fact]
        public void HtmlPostTest()
        {
            var htmlRequest = new HtmlFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: "html")
            {
                Url = GetUrl("TestData/TestHtml.html", "html", out string fileName),
                OriginalFileName = fileName,
                SavingMode = HtmlFileRequest.SavingModeEnum.Files,
                Origin = "TestApi"
            };
            var response = instance.HtmlPost(htmlRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test HugoGet
        /// </summary>
        [Fact]
        public void HugoGetTest()
        {
            string id = HugoPostTest();
            CloudHugoResponse response = new CloudHugoResponse();
            bool operationFinished = false;
            for(int i = 0; i < 60; i++)
            {
                response = instance.HugoGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Message}");
                if (response.Status.ToSystemHttpStatusCode() == HttpStatusCode.OK)
                {
                    operationFinished = true;
                    break;
                }
                Thread.Sleep(1000);   
            }
            Assert.IsType<CloudHugoResponse>(response);
            Assert.True(operationFinished);
            _logger.LogInformation("Operation finished");
        }

        /// <summary>
        /// Test HugoPost
        /// </summary>
        [Fact]
        public string HugoPostTest()
        {
            var url = GetUrl("TestData/hugo_test.md", "md",out _);
            var request = new HugoRequest()
            {
                Url = url
            };
            var response = instance.HugoPost(request);
            var code = response.Status.ToSystemHttpStatusCode();
            Assert.IsType<StatusResponse>(response);
            Assert.Equal(HttpStatusCode.Accepted, code);
            return response.Id;
        }

        /// <summary>
        /// Test ImageToFilePost
        /// </summary>
        [Fact]
        public void ImageToFilePostTest()
        {
            ImageToFileRequest ocrFileRequest = new ImageToFileRequest(
                "en",
                targets,
                outputFormat: "pdf")
            {
                Url = GetUrl(@"TestData/image-based-pdf-sample.pdf", "pdf", out string fileName),
                OriginalFileName = fileName,
                Format = ImageToFileRequest.FormatEnum.Pdf,
                Formatting = true,
                Ocrformat = ImageToFileRequest.OcrformatEnum.Pdf,
                Origin = "TestApi"
            };
            var response = instance.ImageToFilePost(ocrFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test ImageToTextPost
        /// </summary>
        [Fact]
        public void ImageToTextPostTest()
        {
            var request = new ImageToTextRequest(
                ImageToTextRequest.FormatEnum.Jpg,
                "es",
                new List<string>(){"en"})
            {
                Url = GetUrl(@"TestData/test-ocr-text.jpg", "jpg", out string fileName),
                Origin = "TestApi"
            };
            var response = instance.ImageToTextPost(request);
            Assert.IsType<StatusResponse>(response);
            Assert.True(TextRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test LanguagesGet
        /// </summary>
        [Fact]
        public void LanguagesGetTest()
        {
            var response = instance.LanguagesGet();
            Assert.IsType<List<LanguagePairData>>(response);
        }

        /// <summary>
        /// Test MarkdownPost
        /// </summary>
        [Fact]
        public void MarkdownPostTest()
        {
            var shortcodes = new Dictionary<string, List<string>>();
            shortcodes.Add("0", new List<string>()
            {
                "title", "3"
            });
            var front = new List<List<string>>();
            front.Add(new List<string>(){"title"});
            front.Add(new List<string>(){"description"});
            front.Add(new List<string>(){"submenu", "middle", "text"});
            var request = new MarkdownFileRequest(
                "en", 
                new List<string>() { "es" }, 
                url: GetUrl(@"TestData/hugo_test.md", "md", out string fileName),
                originalFileName: fileName, 
                savingMode: MarkdownFileRequest.SavingModeEnum.Files, 
                origin: "test",
                outputFormat: "md",
                shortCodeList: shortcodes);
            var status = instance.MarkdownPost(request);
            Assert.IsType<StatusResponse>(status);
            Assert.True(DocumentRequestIdGet(status.Id, Attempts));
        }

        /// <summary>
        /// Test PdfPost
        /// </summary>
        [Fact]
        public void PdfPostTest()
        {
            PdfFileRequest pdfFileRequest = new PdfFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: "pdf")
            {
                Url = GetUrl(@"TestData/TestPdf.pdf", "pdf", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                PreserveFormatting = true,
                SavingMode = PdfFileRequest.SavingModeEnum.Files,
                Pages = new List<int>() {1}
            };
            var response = instance.PdfPost(pdfFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test PresentationPost
        /// </summary>
        [Fact]
        public void PresentationPostTest()
        {
            PresentationFileRequest presentationFileRequest = new PresentationFileRequest(
                "en",
                new List<string>(){"es"},
                outputFormat: "pptx"
                )
            {
                Url = GetUrl(@"TestData/SmallTest.pptx", "pptx", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                Format = PresentationFileRequest.FormatEnum.Pptx,
                SavingMode = PresentationFileRequest.SavingModeEnum.Files,
                Masters = false,
                Slides = new List<int>(){1, 2}
            };
            var response = instance.PresentationPost(presentationFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test ResxPost
        /// </summary>
        [Fact]
        public void ResxPostTest()
        {
            ResxFileRequest resxFileRequest = new ResxFileRequest(
                "en",
                new List<string>() {"lv"}
                )
            {
                Url = GetUrl(@"TestData/Resources.resx", "resx", out string originalFileName),
                OriginalFileName = originalFileName,
                SavingMode = ResxFileRequest.SavingModeEnum.Files,
                Origin = "TestApi"
            };
            //var response = instance.ResxPost(resxFileRequest);
            //Assert.IsType<StatusResponse>(response);
            //Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test SpreadsheetsPost
        /// </summary>
        [Fact]
        public void SpreadsheetsPostTest()
        {
            SpreadsheetFileRequest spreadsheetFileRequest = new SpreadsheetFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: SpreadsheetFileRequest.OutputFormatEnum.Xlsx)
            {
                Origin = "TestApi",
                Url = GetUrl(@"TestData/TestExcel.xlsx", "xlsx", out string fileName),
                OriginalFileName = fileName,
                SavingMode = SpreadsheetFileRequest.SavingModeEnum.Files,
                Worksheets = new List<int>(){2}
            };
            var response = instance.SpreadsheetPost(spreadsheetFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test TextPost
        /// </summary>
        [Fact]
        public string TextPostTest()
        {
            TextRequest textRequest = new TextRequest("en", targets, new List<string>()
                {"Hello world!"}, origin: "unit-tests");
            var response = instance.TextPost(textRequest);
            var success = TextRequestIdGet(response.Id, 10);
            Assert.IsType<StatusResponse>(response);
            return response.Id;
        }

        [Fact]
        public void XmlPostTest()
        {
            /*XmlFileRequest fileRequest = new XmlFileRequest("en", new List<string>() { "ru", "es" });
            fileRequest.File = GetFile(@"TestData/TestXml.xml", out string originalFileName);
            fileRequest.Origin = "test";
            fileRequest.IgnoreList = new List<string>() { "price", "calories" };
            fileRequest.SavingMode = XmlFileRequest.SavingModeEnum.Both;

            var response = instance.XmlPost(fileRequest);
            Assert.IsType<StatusResponse>(response);
            Thread.Sleep(1000);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));*/
        }
        public bool TextRequestIdGet(string id, int attempts)
        {
            bool success = false;
            for (int i = 0; i < attempts; i++)
            {
                var response = instance.TextRequestIdGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Status} - {response.Message}");
                if (response.Translations.Count > 0)
                {
                    success = true;
                    break;
                }
                Thread.Sleep(1000);
            }
            return success;
        }
        private string GetUrl(string path, string format, out string originalFileName)
        {
            var fileInfo = new FileInfo(path);
            originalFileName = fileInfo.Name;
            using var file = fileInfo.OpenRead();
            var url = fileApi.FileUploadPostAsync(format, file).Result;
            return url;
        }
        private Stream GetFile(string path)
        {
            return File.OpenRead(path);
        }

        private string GetFileName(string path)
        {
            var fileInfo = new FileInfo(path);
            return fileInfo.Name;
        }
    }
}
