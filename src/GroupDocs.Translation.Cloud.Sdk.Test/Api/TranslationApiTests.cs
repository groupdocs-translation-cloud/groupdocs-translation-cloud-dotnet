/*
 * GroupDocs.Translation.ApiGateway.Web
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Threading;
using RestSharp;
using Xunit;
using Microsoft.Extensions.Logging;
using GroupDocs.Translation.Cloud.Sdk.Client;
using GroupDocs.Translation.Cloud.Sdk.Api;
using GroupDocs.Translation.Cloud.Sdk.Client.Auth;
using GroupDocs.Translation.Cloud.Sdk.Extensions;
using GroupDocs.Translation.Cloud.Sdk.Model;
using Xunit.Abstractions;
using HttpStatusCode = System.Net.HttpStatusCode;

// uncomment below to import models
//using GroupDocs.Translation.Cloud.Sdk.Model;

namespace GroupDocs.Translation.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TranslationApiTests : IDisposable
    {
        private TranslationApi instance;
        private ILogger _logger;
        private readonly int Attempts;
        private List<string> targets;
        public TranslationApiTests(ITestOutputHelper outputHelper)
        {
            targets = new List<string>() { "es" };
            Attempts = 60;
            _logger = LoggerFactory
                .Create(builder =>
                {
                    builder.AddXunit(outputHelper);
                })
                .CreateLogger<TranslationApiTests>();
            var conf = new Configuration()
            {
                OAuthFlow = OAuthFlow.APPLICATION,
                OAuthClientId = "translate.cloud",
                OAuthClientSecret = "5d0da472782620373473703904631795",
                BasePath = "http://localhost:5005"
            };
            instance = new TranslationApi(conf);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransportApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransportApi
            //Assert.IsType<TransportApi>(instance);
        }

        /// <summary>
        /// Test AutoPost
        /// </summary>
        [Fact]
        public void AutoPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AutoPostRequest autoPostRequest = null;
            //var response = instance.AutoPost(autoPostRequest);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test CsvPost
        /// </summary>
        [Fact]
        public void CsvPostTest()
        {
            CsvFileRequest csvFileRequest = new CsvFileRequest(
                "en",
                targets,
                outFormat:"csv"
                )
            {
                File = GetFile(@"TestData/TestCsv.csv", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                Format = CsvFileRequest.FormatEnum.Csv,
                SavingMode = CsvFileRequest.SavingModeEnum.Files,
                Separator = ","
            };
            var response = instance.CsvPost(csvFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test DocumentPost
        /// </summary>
        [Fact]
        public void DocumentPostTest()
        {
            TextDocumentFileRequest textDocumentFileRequest = new TextDocumentFileRequest(
                "en", 
                new List<string>(){"es"},
                outputFormat: "docx"
                )
            {
                File = GetFile(@"TestData/translation_test.docx", out string fileName),
                Format = TextDocumentFileRequest.FormatEnum.Docx,
                Origin = "ApiTest",
                OriginalFileName = fileName,
                PreserveFormatting = true,
                SavingMode = TextDocumentFileRequest.SavingModeEnum.Files
            };
            var response = instance.DocumentPost(textDocumentFileRequest);
            CloudFileResponse cloudFileResponse;
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test DocumentRequestIdGet
        /// </summary>
        private bool DocumentRequestIdGet(string id, int attempts)
        {
            bool success = false;
            for (int i = 0; i < attempts; i++)
            {
                var response = instance.DocumentRequestIdGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Status} - {response.Message}");
                if (response.Urls.Count > 0)
                {
                    success = true;
                    break;
                }
                Thread.Sleep(1000);
            }
            return success;
        }

        /// <summary>
        /// Test HcGet
        /// </summary>
        [Fact]
        public void HcGetTest()
        {
            var response = instance.HcGet();
            Assert.IsType<HealthCheckStatus>(response);
            Assert.Equal("Health check passed.", response.CloudStatus);
            Assert.Equal("Success", response.KafkaDeliveryStatus);
        }

        /// <summary>
        /// Test HtmlPost
        /// </summary>
        [Fact]
        public void HtmlPostTest()
        {
            var htmlRequest = new HtmlFileRequest(
                "en",
                new List<string>() { "es" })
            {
                File = GetFile("TestData/TestHtmlByAnton.html", out string fileName),
                OriginalFileName = fileName,
                SavingMode = HtmlFileRequest.SavingModeEnum.Files,
                Origin = "TestApi"
            };
            var response = instance.HtmlPost(htmlRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test HugoGet
        /// </summary>
        [Fact]
        public void HugoGetTest()
        {
            string id = HugoPostTest();
            CloudHugoResponse response = new CloudHugoResponse();
            bool operationFinished = false;
            for(int i = 0; i < 60; i++)
            {
                response = instance.HugoGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Message}");
                if (response.Status.ToSystemHttpStatusCode() == HttpStatusCode.OK)
                {
                    operationFinished = true;
                    break;
                }
                Thread.Sleep(1000);   
            }
            Assert.IsType<CloudHugoResponse>(response);
            Assert.True(operationFinished);
            _logger.LogInformation("Operation finished");
        }

        /// <summary>
        /// Test HugoPost
        /// </summary>
        [Fact]
        public string HugoPostTest()
        {
            var file = GetFile("TestData/hugo_test.md", out _);
            var request = new HugoRequest()
            {
                File = file
            };
            var response = instance.HugoPost(request);
            var code = response.Status.ToSystemHttpStatusCode();
            Assert.IsType<StatusResponse>(response);
            Assert.Equal(HttpStatusCode.Accepted, code);
            return response.Id;
        }

        /// <summary>
        /// Test ImageToFilePost
        /// </summary>
        [Fact]
        public void ImageToFilePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OcrFileRequest ocrFileRequest = null;
            //var response = instance.ImageToFilePost(ocrFileRequest);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test ImageToTextPost
        /// </summary>
        [Fact]
        public void ImageToTextPostTest()
        {
            var request = new OcrTextRequest(
                OcrTextRequest.FormatEnum.Jpg,
                "en",
                targets)
            {
                File = GetFile(@"TestData/test-ocr-text.jpg", out string fileName),
                Origin = "TestApi"
            };
            var response = instance.ImageToTextPost(request);
            Assert.IsType<StatusResponse>(response);
            Assert.True(TextRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test LanguagesGet
        /// </summary>
        [Fact]
        public void LanguagesGetTest()
        {
            var response = instance.LanguagesGet();
            Assert.IsType<List<LanguagePairData>>(response);
        }

        /// <summary>
        /// Test MarkdownPost
        /// </summary>
        [Fact]
        public void MarkdownPostTest()
        {
            var request = new MarkdownFileRequest(
                "en", 
                new List<string>() { "es" }, 
                GetFile(@"TestData/TestMd.md", out string fileName),
                fileName, 
                savingMode: MarkdownFileRequest.SavingModeEnum.Files, 
                origin: "test",
                outputFormat: "md");
            var status = instance.MarkdownPost(request);
            Assert.IsType<StatusResponse>(status);
            Assert.True(DocumentRequestIdGet(status.Id, Attempts));
        }

        /// <summary>
        /// Test PdfPost
        /// </summary>
        [Fact]
        public void PdfPostTest()
        {
            PdfFileRequest pdfFileRequest = new PdfFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: "pdf")
            {
                File = GetFile(@"TestData/sample_explain.pdf", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                PreserveFormatting = true,
                SavingMode = PdfFileRequest.SavingModeEnum.Files
            };
            var response = instance.PdfPost(pdfFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test PresentationPost
        /// </summary>
        [Fact]
        public void PresentationPostTest()
        {
            PresentationFileRequest presentationFileRequest = new PresentationFileRequest(
                "en",
                new List<string>(){"es"},
                outputFormat: "pptx"
                )
            {
                File = GetFile(@"TestData/SmallTest.pptx", out string fileName),
                OriginalFileName = fileName,
                Origin = "TestApi",
                Format = PresentationFileRequest.FormatEnum.Pptx,
                SavingMode = PresentationFileRequest.SavingModeEnum.Files
            };
            var response = instance.PresentationPost(presentationFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test ResxPost
        /// </summary>
        [Fact]
        public void ResxPostTest()
        {
            ResxFileRequest resxFileRequest = new ResxFileRequest(
                "en",
                new List<string>() {"lv"}
                )
            {
                File = GetFile(@"TestData/Resources.resx", out string originalFileName),
                OriginalFileName = originalFileName,
                SavingMode = ResxFileRequest.SavingModeEnum.Files,
                Origin = "TestApi"
            };
            var response = instance.ResxPost(resxFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test SpreadsheetsPost
        /// </summary>
        [Fact]
        public void SpreadsheetsPostTest()
        {
            SpreadsheetFileRequest spreadsheetFileRequest = new SpreadsheetFileRequest(
                "en",
                new List<string>() { "es" },
                outputFormat: SpreadsheetFileRequest.OutputFormatEnum.Xlsx)
            {
                Origin = "TestApi",
                File = GetFile(@"TestData/translation_test.xlsx", out string fileName),
                OriginalFileName = fileName,
                SavingMode = SpreadsheetFileRequest.SavingModeEnum.Files
            };
            var response = instance.SpreadsheetsPost(spreadsheetFileRequest);
            Assert.IsType<StatusResponse>(response);
            Assert.True(DocumentRequestIdGet(response.Id, Attempts));
        }

        /// <summary>
        /// Test TextPost
        /// </summary>
        [Fact]
        public string TextPostTest()
        {
            TextRequest textRequest = new TextRequest("en", targets, new List<string>()
                {"Hello world!"}, origin: "unit-tests");
            var response = instance.TextPost(textRequest);
            Assert.IsType<StatusResponse>(response);
            return response.Id;
        }
        
        public bool TextRequestIdGet(string id, int attempts)
        {
            bool success = false;
            for (int i = 0; i < attempts; i++)
            {
                var response = instance.TextRequestIdGet(id);
                _logger.LogInformation($"Attempt {i}: {response.Status} - {response.Message}");
                if (response.Translations != null)
                {
                    success = true;
                    break;
                }
                Thread.Sleep(1000);
            }
            return success;
        }

        private byte[] GetFile(string path, out string originalFileName)
        {
            var fileInfo = new FileInfo(path);
            originalFileName = fileInfo.Name;
            using var file = fileInfo.OpenRead();
            var bytes = new byte[file.Length];
            file.Read(bytes, 0, bytes.Length);
            return bytes;
        }
    }
}
